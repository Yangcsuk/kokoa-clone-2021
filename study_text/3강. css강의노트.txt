Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

1강 CSS(Cascading Style Sheets)를 HTML에 넣는 방식 2가지
  1) Line CSS : HTML과 CSS가 같은 파일 안에 공존 :   <style>내용</style>
    - style이라는 태그를 사용(head 태그 안에 있어야 함)
  2) External CSS : HTML과 CSS가 다른 파일로 별도관리 : <link href="styles.css" rel="stylesheet" />
=> 니꼬샘은 2번처럼 분리된 파일로 관리하는것을 추천
    (왜? 다른 HTML페이지에서도 사용가능하므로)

2강 CSS문법규칙
  1) h1 { color : blue };  h1(selector, 선택자), color(property, 속성), blue(value, 값)
  1) selector : 태그(tag)에 속성(property)을 선언해준다(초록색, 크기 등등..)
      footer {
        color: red;
        text-decoration: underline;
        font-weight: 100;
        font-style: italic;
        font-size: 25px;
        text-align: center;
      }
	위의 예제에서 볼 수 있듯이 footer태그로 묶인 폰트의 모든 속성을 바꿀 수 있다.
	모든 속성을 다 외울 필요는 없고, 홈페이지 등을 통해서 익혀가자

3강 블럭(Blocks)과 인라인(Inlines)
 - Block : 옆에 다른 요소가 오지 못함(= 한 줄을 다 차지함)
	해당태그는 div, p, address...(대부분의 태그가 블럭임)
	높이(height)와 너비(width)를 지정할 수 있다.
 - Inline : 옆에 다른 요소가 올 수 있음(=한 줄에 칸 단위로 차지함)
	해당태그는 span, a, img, code...(인라인용 태그를 외우는게 훨씬 빠름)
	높이(height)와 너비(width)를 지정할 수 없다.

4,5강 Margin
  - Margin이란? : box의 경계(boarder)의 바깥에 있는 공간
	margin-top: a; margin-right: b; margin-bottom: c; margin-left: d;
	를 합쳐서 margin: a b c d;  가능함
  - css 속성 중 display : Block과 Inline 기능변환이 가능하다.
  - 그러나 Inline은 높이(height)와 너비(width)를 가질 수 없기 때문에 css속성으로 height와 width를 지정할 수 없다.
  - 브라우저는 자동으로 html 문서 내에 기본 값들을 적용한다.(user agent stylesheet)
	1) 문서 끝에 빈칸(Margin) -> 한컴이랑 비슷
	2) Title에 굵은글씨 및 Block기능
  - Collapsing margins : 두개의 여백(margin)이 겹치면 병합되는 현상
  (말로 설명하기 힘든데, Body 마진을 0으로 하고, block 마진을 10으로 하면 body 위(top) 마진이 10을 먹인 것 처럼 배경이 딸려들어감. 이런 현상을 없애기 위해 다음강의인 Padding을 들어야 함)

6강 Padding
  - padding : margin의 반대 개념
	-> margin은 box의 경계 "바깥"에 있는 공간
	-> padding은 box의 경계 "안쪽"에 있는 공간
  - 여러 div를 생성했을 때 'id'를 이용하여 div들을 구분할 수 있고, 각각 다른 속성을 적용시킬 수 있다.
  - CSS로 id ="first" 에 속성을 적용 시킬 땐, #first { background-color : yellow}
  - 이는 body, span 등에서도 마찬가지다.
  - CSS 코드의 id명은 HTML 코드에서 썼던 id명과 같아야 한다.

7강 Border
  - Border는 말그대로 Box의 경계(border)임
  - 니꼬는 거의 한 종류의 border만씀(나머지는 다 별로라고 함)
  - border : 2px solid black; (뜻 : 2픽셀의 실선 검은색 경계 생성)
  - * 는 모든 style에 적용됨

8강 Classes
  - id는 하나의 태그에 고유한 id를 지정하고, style 지정은 #(해시태그)를 쓰고,
  - class는 여러 태그에 동일한 class를 지정하고, style 지정은 .(dot)을 쓴다.
  - class는 하나의 태그에 여러 class 적용이 가능하다(중요!!!!)
  - 대부분의 홈페이지들은 id 보다 class를 많이 쓴다.
  - inline요소(span 태그 등)은 높이, 너비가 없어 위아래 Margin을 줄 수 없다. 그러나 padding은 가능
  - block요소(p 태그 등)은 전체 마진적용이 가능하다
    → inline요소에 margin을 주려면 display : block으로 변환을 시켜주면 된다!!(중요!!)

9강 Inline-block
  - div는 block요소라서 한줄에 하나밖에 오지 못한다.
  - inline요소로 바꾸면 한줄에 여러개가 나올 수 있으나, 높이와 너비를 가질 수 없다.
  - inline-block으로 바꾸면 한줄에 여러개의 block을 가질 수 있다.(그러나 별로임)
    왜? 반응형 디자인(Responsive Design)을 지원하지 않으므로 -> Flex를 배워야지 그럼

10~11강 Flexbox
  - 먼저 알아야 할 것
    0) 주축(main axis) - 수평(default), 교차축(cross axix) - 수직(default)(가로축, 세로축이 아니다. 왜? 바꿀 수 있음)
    1) 부모 element에 명시해야 함. 자식 element에는 어떤 것도 적지 말아야 된다.
       - 예) 부모 element는 <body>, 자식 elemnet는 <body>안에 있는<div>
       - 예) 조부모 element : <body>, 부모 element : <div>, 자식 element : <태그>, 글자 등...
    2) 교차축을 다룰 때는 body에 높이(height)를 정의할 것(height=100vh + margin:0)
  - 주축 변환 : flex-direction : row;(기본값, 주축-수평 교차축-수직), :column(주축-수직, 교차축-수평)
  - 주축 정렬 : justify-content : space-between;양쪽으로 붙이기 space-evenly; 주축에 균등분배
  - 교차축 정렬 : align-items : center; 교차축 가운데 배치(한글 세로축 정렬)
  - flex-wrap:nowrap;(기본값, block이 창보다 작아도 그냥 찌그려트림)
	   :wrap;(block크기가 창보다 크면 inline-block처럼 하나씩 내림)

12강 Fixed(홈페이지 메뉴 만들때 많이 사용)
  - position fixed를 이용하면 스크롤해도 항상 제자리에 머무른다.
  - 처음 만들어진 자리에 고정 되어있다. 하지만 top, left, right, bottom 중 하나만 수정해도 서로 다른 레이어에 위치하게되어 원래 위치가 무시된다.
  - positon fixed를 이용하면 가장 위에 위치하게 된다. (맨 앞)

13강 Relative Absolute
  1. positon: static (default)
  2. position: fixed
    - element가 처음 생성된 자리에 고정.
  3. position: relative;
    - element가 '처음 생성된 위치'를 기준점으로,
      top bottom left right으로 위치를 조금씩 수정할 수 있다.
  4. position: absolute;
    - 가장 가까운 relative 부모를 기준으로 이동, 부모 중 relative가 없으면 최종 상위 부모인 body에 연동된다.
  결론 : 앞으로 relative와 absolute를 연동하여 홈페이지 꾸밀 일이 많을 것이다

14강 Pseudo Selectors Part1
  - pseudo selector : 좀더 세부적으로 엘리먼트를 선택해 주는 것!
    (기존 방법 : 태그, id w/#, class w/.)
  - 예제) 첫번째 div:first-child { background-color: tomato; }
	마지막div:last-child { background-color: teal; }
	n번째 태그 수정하기 span:nth-child(n) { background-color: teal; }
	홀짝 태그 수정하기  span:nth-child(even//or odd) { background-color: teal; }
	3번에 한번씩 span:nth-child(3n+1) { background-color: teal; }
	id나 class를 따로 만드는것보다 이렇게 지정하는게 훨씬 좋은 방법이다.
	css에서만 선택을 하면 되니까! html코드를 고칠 필요가 없기 때문이다
  - Live Server 사용하시면서 last-child 지정 안되는 이유!
    -> Live Server 가 Body 태그 안쪽 맨 아래에 보이지 않는 스크립트 태그 ( 또는 어떤 것 ) 을
        만들기 때문에 더이상 div가 last-child가 아닙니다.

15강 Combinators
  - div의 바로 밑 자식에서 span을 찾아서 그것만 효과를 주는 방법
    1) div span { text-decoration : underline; }
       이렇게하면 div밑에 있는 모든 span이 효과를 가진다
       직접적인 부모가 아니어도 밑에있는 것들을 모두 css가 찾는다.
    2) div > span { text-decoration : underline; }
      이렇게하면 바로 밑!!! 을 찾게 되므로 바로 밑의 자식만 건들일수있게된다.
  - 형제에게 효과를 주는방법
     p + span { color: black; }
    + 를 사용하면 형제에게 영향을 끼칠 수 있다. cool
   ※ > 를 사용하면 direct child를 찾고, + 를 사용하면 바로 코드상 밑에 있는 sibling을 찾게된다.

16강 Pseudo Selectors Part2
  - ~를 사용해 바로 뒤에 오는 형제 관계가 아닌 tag에도 스타일을 적용시킬 수 있다.
  - tag[attribute="value"]을 통해 스타일을 적용시킬 수 있다.
  - tag[attribute~="value"]으로 value를 포함하는 모든 tag에 스타일을 적용시킬 
    *= "hello" 라고 하면 ㅁㄴㅇㄹㄴㅇㄹhelloㅁㄴㅇㄹㄴㅇㄹ 라고 줘도 선택되고요.
    ~= "hello" 라고 하면 앞뒤에 공백이 있는 상태에서 hello 인 경우만 선택되요.

17강 States(상태)
  - F12(개발자 도구) -> Styles -> :hov 클릭하면 총 7개의 States(상태)가 있음
  1) :active : 버튼을 클릭 후 떼지않은 상태 button:active { background-color: tomato; }
  2) :hover : 버튼에 마우스를 클릭하지 않고 단순히 올려놓은 상태
  3) :focus : 자판을 입력받을 준비(또는 클릭을 엔터로 대체할 준비)가 된 상태
  4) :visited : 오직 링크에만 적용됨, 방문한 적(클릭한 적) 있는 상태
  5) :focus-within : focus된 자식을 가진 부모 엘리먼트의 상태를 지칭한다
      form:focus-within {background-color: seagreen;} << 자식들이 focus되면 부모의 배경색을 지정
  6) :focus-visible
  7) :target
  - !!!!!!!중요!!!!!두가지 이상의 기능을 혼합할 수 있다. form : hover input : focus { color-blue; }

18강 Recap(추가 학습 및 복습)
  - placeholder의 글자색 만 바꿀 수 있다.(실제 쓰이는 글자 색은 검은색으로)
    예시) input::placeholder { color : yellowgreen; }
  - selection은 드래그해서 글자 등을 선택했을 때 나오는 상태를 지칭한다.
    예시) p::selection { background-color : yellowgreen; }

19강 Colores and Variables
  - 색깔을 지정하는 세가지 방법
    1) 그냥 영어로 색깔쓰기(Red, Blue, Yellow 등...)
    2) hexadecimal color(16진수 컬러)
    3) rgb code(0~255, 0~255, 0~255)
    4) rgba(rgb + alpha(투명도 0~100))
  - 변수(var)를 지정하여 여러 태그의 색상을 동시에 제어할 수 있다.
    예시) :root { --main-color : rgb(22, 123, 0); }
	a { color : var(--main-color); }
	div { color : var(--main-color); }
	이렇게 하면 a와 div의 색깔을 동시에 제어할 수 있다.